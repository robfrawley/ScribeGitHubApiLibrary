var search_data = {
    'index': {
        'searchIndex': ["github","github\\api","github\\api\\currentuser","github\\api\\enterprise","github\\api\\gitdata","github\\api\\issue","github\\api\\organization","github\\api\\pullrequest","github\\api\\repository","github\\exception","github\\httpclient","github\\httpclient\\cache","github\\httpclient\\listener","github\\httpclient\\message","github\\api\\abstractapi","github\\api\\apiinterface","github\\api\\authorizations","github\\api\\currentuser","github\\api\\currentuser\\deploykeys","github\\api\\currentuser\\emails","github\\api\\currentuser\\followers","github\\api\\currentuser\\notifications","github\\api\\currentuser\\starring","github\\api\\currentuser\\watchers","github\\api\\enterprise","github\\api\\enterprise\\license","github\\api\\enterprise\\stats","github\\api\\gists","github\\api\\gitdata","github\\api\\gitdata\\blobs","github\\api\\gitdata\\commits","github\\api\\gitdata\\references","github\\api\\gitdata\\tags","github\\api\\gitdata\\trees","github\\api\\issue","github\\api\\issue\\comments","github\\api\\issue\\events","github\\api\\issue\\labels","github\\api\\issue\\milestones","github\\api\\markdown","github\\api\\meta","github\\api\\organization","github\\api\\organization\\members","github\\api\\organization\\teams","github\\api\\pullrequest","github\\api\\pullrequest\\comments","github\\api\\repo","github\\api\\repository\\assets","github\\api\\repository\\collaborators","github\\api\\repository\\comments","github\\api\\repository\\commits","github\\api\\repository\\contents","github\\api\\repository\\deploykeys","github\\api\\repository\\downloads","github\\api\\repository\\forks","github\\api\\repository\\hooks","github\\api\\repository\\labels","github\\api\\repository\\releases","github\\api\\repository\\statuses","github\\api\\user","github\\client","github\\exception\\apilimitexceedexception","github\\exception\\badmethodcallexception","github\\exception\\errorexception","github\\exception\\exceptioninterface","github\\exception\\invalidargumentexception","github\\exception\\missingargumentexception","github\\exception\\runtimeexception","github\\exception\\twofactorauthenticationrequiredexception","github\\exception\\validationfailedexception","github\\httpclient\\cache\\cacheinterface","github\\httpclient\\cache\\filesystemcache","github\\httpclient\\cache\\gaufrettecache","github\\httpclient\\cachedhttpclient","github\\httpclient\\httpclient","github\\httpclient\\httpclientinterface","github\\httpclient\\listener\\authlistener","github\\httpclient\\listener\\errorlistener","github\\httpclient\\message\\responsemediator","github\\resultpager","github\\resultpagerinterface","github\\api\\abstractapi::__construct","github\\api\\abstractapi::configure","github\\api\\abstractapi::getperpage","github\\api\\abstractapi::setperpage","github\\api\\apiinterface::getperpage","github\\api\\apiinterface::setperpage","github\\api\\authorizations::all","github\\api\\authorizations::show","github\\api\\authorizations::create","github\\api\\authorizations::update","github\\api\\authorizations::remove","github\\api\\authorizations::check","github\\api\\currentuser::show","github\\api\\currentuser::update","github\\api\\currentuser::emails","github\\api\\currentuser::follow","github\\api\\currentuser::followers","github\\api\\currentuser::issues","github\\api\\currentuser::keys","github\\api\\currentuser::notifications","github\\api\\currentuser::organizations","github\\api\\currentuser::repositories","github\\api\\currentuser::watchers","github\\api\\currentuser::watched","github\\api\\currentuser::starring","github\\api\\currentuser::starred","github\\api\\currentuser\\deploykeys::all","github\\api\\currentuser\\deploykeys::show","github\\api\\currentuser\\deploykeys::create","github\\api\\currentuser\\deploykeys::update","github\\api\\currentuser\\deploykeys::remove","github\\api\\currentuser\\emails::all","github\\api\\currentuser\\emails::add","github\\api\\currentuser\\emails::remove","github\\api\\currentuser\\followers::all","github\\api\\currentuser\\followers::check","github\\api\\currentuser\\followers::follow","github\\api\\currentuser\\followers::unfollow","github\\api\\currentuser\\notifications::all","github\\api\\currentuser\\notifications::allinrepository","github\\api\\currentuser\\notifications::markasreadall","github\\api\\currentuser\\notifications::markasreadinrepository","github\\api\\currentuser\\notifications::markasread","github\\api\\currentuser\\notifications::show","github\\api\\currentuser\\notifications::showsubscription","github\\api\\currentuser\\notifications::createsubscription","github\\api\\currentuser\\notifications::removesubscription","github\\api\\currentuser\\starring::all","github\\api\\currentuser\\starring::check","github\\api\\currentuser\\starring::star","github\\api\\currentuser\\starring::unstar","github\\api\\currentuser\\watchers::all","github\\api\\currentuser\\watchers::check","github\\api\\currentuser\\watchers::watch","github\\api\\currentuser\\watchers::unwatch","github\\api\\enterprise::stats","github\\api\\enterprise::license","github\\api\\enterprise\\license::show","github\\api\\enterprise\\stats::issues","github\\api\\enterprise\\stats::hooks","github\\api\\enterprise\\stats::milestones","github\\api\\enterprise\\stats::orgs","github\\api\\enterprise\\stats::comments","github\\api\\enterprise\\stats::pages","github\\api\\enterprise\\stats::users","github\\api\\enterprise\\stats::gists","github\\api\\enterprise\\stats::pulls","github\\api\\enterprise\\stats::repos","github\\api\\enterprise\\stats::all","github\\api\\enterprise\\stats::show","github\\api\\gists::all","github\\api\\gists::show","github\\api\\gists::create","github\\api\\gists::update","github\\api\\gists::fork","github\\api\\gists::remove","github\\api\\gists::check","github\\api\\gists::star","github\\api\\gists::unstar","github\\api\\gitdata::blobs","github\\api\\gitdata::commits","github\\api\\gitdata::references","github\\api\\gitdata::tags","github\\api\\gitdata::trees","github\\api\\gitdata\\blobs::configure","github\\api\\gitdata\\blobs::show","github\\api\\gitdata\\blobs::create","github\\api\\gitdata\\commits::show","github\\api\\gitdata\\commits::create","github\\api\\gitdata\\references::all","github\\api\\gitdata\\references::branches","github\\api\\gitdata\\references::tags","github\\api\\gitdata\\references::show","github\\api\\gitdata\\references::create","github\\api\\gitdata\\references::update","github\\api\\gitdata\\references::remove","github\\api\\gitdata\\tags::all","github\\api\\gitdata\\tags::show","github\\api\\gitdata\\tags::create","github\\api\\gitdata\\trees::show","github\\api\\gitdata\\trees::create","github\\api\\issue::all","github\\api\\issue::find","github\\api\\issue::org","github\\api\\issue::show","github\\api\\issue::create","github\\api\\issue::update","github\\api\\issue::comments","github\\api\\issue::events","github\\api\\issue::labels","github\\api\\issue::milestones","github\\api\\issue\\comments::configure","github\\api\\issue\\comments::all","github\\api\\issue\\comments::show","github\\api\\issue\\comments::create","github\\api\\issue\\comments::update","github\\api\\issue\\comments::remove","github\\api\\issue\\events::all","github\\api\\issue\\events::show","github\\api\\issue\\labels::all","github\\api\\issue\\labels::create","github\\api\\issue\\labels::add","github\\api\\issue\\labels::replace","github\\api\\issue\\labels::remove","github\\api\\issue\\labels::clear","github\\api\\issue\\milestones::all","github\\api\\issue\\milestones::show","github\\api\\issue\\milestones::create","github\\api\\issue\\milestones::update","github\\api\\issue\\milestones::remove","github\\api\\issue\\milestones::labels","github\\api\\markdown::render","github\\api\\markdown::renderraw","github\\api\\meta::service","github\\api\\organization::show","github\\api\\organization::update","github\\api\\organization::repositories","github\\api\\organization::members","github\\api\\organization::teams","github\\api\\organization\\members::all","github\\api\\organization\\members::show","github\\api\\organization\\members::check","github\\api\\organization\\members::publicize","github\\api\\organization\\members::conceal","github\\api\\organization\\members::remove","github\\api\\organization\\teams::all","github\\api\\organization\\teams::create","github\\api\\organization\\teams::show","github\\api\\organization\\teams::update","github\\api\\organization\\teams::remove","github\\api\\organization\\teams::members","github\\api\\organization\\teams::check","github\\api\\organization\\teams::addmember","github\\api\\organization\\teams::removemember","github\\api\\organization\\teams::repositories","github\\api\\organization\\teams::repository","github\\api\\organization\\teams::addrepository","github\\api\\organization\\teams::removerepository","github\\api\\pullrequest::all","github\\api\\pullrequest::show","github\\api\\pullrequest::commits","github\\api\\pullrequest::files","github\\api\\pullrequest::comments","github\\api\\pullrequest::create","github\\api\\pullrequest::update","github\\api\\pullrequest::merged","github\\api\\pullrequest::merge","github\\api\\pullrequest\\comments::all","github\\api\\pullrequest\\comments::show","github\\api\\pullrequest\\comments::create","github\\api\\pullrequest\\comments::update","github\\api\\pullrequest\\comments::remove","github\\api\\repo::find","github\\api\\repo::activity","github\\api\\repo::statistics","github\\api\\repo::org","github\\api\\repo::show","github\\api\\repo::create","github\\api\\repo::update","github\\api\\repo::remove","github\\api\\repo::readme","github\\api\\repo::collaborators","github\\api\\repo::comments","github\\api\\repo::commits","github\\api\\repo::contents","github\\api\\repo::downloads","github\\api\\repo::releases","github\\api\\repo::keys","github\\api\\repo::forks","github\\api\\repo::hooks","github\\api\\repo::labels","github\\api\\repo::statuses","github\\api\\repo::branches","github\\api\\repo::contributors","github\\api\\repo::languages","github\\api\\repo::tags","github\\api\\repo::teams","github\\api\\repo::watchers","github\\api\\repo::subscribers","github\\api\\repo::merge","github\\api\\repository\\assets::all","github\\api\\repository\\assets::show","github\\api\\repository\\assets::getcontent","github\\api\\repository\\assets::create","github\\api\\repository\\assets::edit","github\\api\\repository\\assets::remove","github\\api\\repository\\collaborators::all","github\\api\\repository\\collaborators::check","github\\api\\repository\\collaborators::add","github\\api\\repository\\collaborators::remove","github\\api\\repository\\comments::configure","github\\api\\repository\\comments::all","github\\api\\repository\\comments::show","github\\api\\repository\\comments::create","github\\api\\repository\\comments::update","github\\api\\repository\\comments::remove","github\\api\\repository\\commits::all","github\\api\\repository\\commits::compare","github\\api\\repository\\commits::show","github\\api\\repository\\contents::readme","github\\api\\repository\\contents::show","github\\api\\repository\\contents::create","github\\api\\repository\\contents::exists","github\\api\\repository\\contents::update","github\\api\\repository\\contents::rm","github\\api\\repository\\contents::archive","github\\api\\repository\\contents::download","github\\api\\repository\\deploykeys::all","github\\api\\repository\\deploykeys::show","github\\api\\repository\\deploykeys::create","github\\api\\repository\\deploykeys::update","github\\api\\repository\\deploykeys::remove","github\\api\\repository\\downloads::all","github\\api\\repository\\downloads::show","github\\api\\repository\\downloads::remove","github\\api\\repository\\forks::all","github\\api\\repository\\forks::create","github\\api\\repository\\hooks::all","github\\api\\repository\\hooks::show","github\\api\\repository\\hooks::create","github\\api\\repository\\hooks::update","github\\api\\repository\\hooks::test","github\\api\\repository\\hooks::remove","github\\api\\repository\\labels::all","github\\api\\repository\\labels::show","github\\api\\repository\\labels::create","github\\api\\repository\\labels::update","github\\api\\repository\\labels::remove","github\\api\\repository\\releases::all","github\\api\\repository\\releases::show","github\\api\\repository\\releases::create","github\\api\\repository\\releases::edit","github\\api\\repository\\releases::remove","github\\api\\repository\\releases::assets","github\\api\\repository\\statuses::show","github\\api\\repository\\statuses::combined","github\\api\\repository\\statuses::create","github\\api\\user::find","github\\api\\user::all","github\\api\\user::show","github\\api\\user::organizations","github\\api\\user::following","github\\api\\user::followers","github\\api\\user::watched","github\\api\\user::starred","github\\api\\user::subscriptions","github\\api\\user::repositories","github\\api\\user::gists","github\\api\\user::keys","github\\api\\user::publicevents","github\\client::__construct","github\\client::api","github\\client::authenticate","github\\client::setenterpriseurl","github\\client::gethttpclient","github\\client::sethttpclient","github\\client::clearheaders","github\\client::setheaders","github\\client::getoption","github\\client::setoption","github\\client::getsupportedapiversions","github\\client::__call","github\\client::currentuser","github\\client::me","github\\client::ent","github\\client::enterprise","github\\client::git","github\\client::gitdata","github\\client::gist","github\\client::gists","github\\client::issue","github\\client::issues","github\\client::markdown","github\\client::organization","github\\client::organizations","github\\client::pr","github\\client::pullrequest","github\\client::pullrequests","github\\client::repo","github\\client::repos","github\\client::repository","github\\client::repositories","github\\client::team","github\\client::teams","github\\client::user","github\\client::users","github\\client::authorization","github\\client::authorizations","github\\client::meta","github\\exception\\apilimitexceedexception::__construct","github\\exception\\missingargumentexception::__construct","github\\exception\\twofactorauthenticationrequiredexception::__construct","github\\exception\\twofactorauthenticationrequiredexception::gettype","github\\httpclient\\cache\\cacheinterface::has","github\\httpclient\\cache\\cacheinterface::getmodifiedsince","github\\httpclient\\cache\\cacheinterface::getetag","github\\httpclient\\cache\\cacheinterface::get","github\\httpclient\\cache\\cacheinterface::set","github\\httpclient\\cache\\filesystemcache::__construct","github\\httpclient\\cache\\filesystemcache::get","github\\httpclient\\cache\\filesystemcache::set","github\\httpclient\\cache\\filesystemcache::has","github\\httpclient\\cache\\filesystemcache::getmodifiedsince","github\\httpclient\\cache\\filesystemcache::getetag","github\\httpclient\\cache\\gaufrettecache::__construct","github\\httpclient\\cache\\gaufrettecache::get","github\\httpclient\\cache\\gaufrettecache::set","github\\httpclient\\cache\\gaufrettecache::has","github\\httpclient\\cache\\gaufrettecache::getmodifiedsince","github\\httpclient\\cache\\gaufrettecache::getetag","github\\httpclient\\cachedhttpclient::getcache","github\\httpclient\\cachedhttpclient::setcache","github\\httpclient\\cachedhttpclient::request","github\\httpclient\\cachedhttpclient::getlastresponse","github\\httpclient\\httpclient::__construct","github\\httpclient\\httpclient::setoption","github\\httpclient\\httpclient::setheaders","github\\httpclient\\httpclient::clearheaders","github\\httpclient\\httpclient::addlistener","github\\httpclient\\httpclient::addsubscriber","github\\httpclient\\httpclient::get","github\\httpclient\\httpclient::post","github\\httpclient\\httpclient::patch","github\\httpclient\\httpclient::delete","github\\httpclient\\httpclient::put","github\\httpclient\\httpclient::request","github\\httpclient\\httpclient::authenticate","github\\httpclient\\httpclient::getlastrequest","github\\httpclient\\httpclient::getlastresponse","github\\httpclient\\httpclientinterface::get","github\\httpclient\\httpclientinterface::post","github\\httpclient\\httpclientinterface::patch","github\\httpclient\\httpclientinterface::put","github\\httpclient\\httpclientinterface::delete","github\\httpclient\\httpclientinterface::request","github\\httpclient\\httpclientinterface::setoption","github\\httpclient\\httpclientinterface::setheaders","github\\httpclient\\httpclientinterface::authenticate","github\\httpclient\\listener\\authlistener::__construct","github\\httpclient\\listener\\authlistener::onrequestbeforesend","github\\httpclient\\listener\\errorlistener::__construct","github\\httpclient\\listener\\errorlistener::onrequesterror","github\\httpclient\\message\\responsemediator::getcontent","github\\httpclient\\message\\responsemediator::getpagination","github\\httpclient\\message\\responsemediator::getapilimit","github\\resultpager::__construct","github\\resultpager::getpagination","github\\resultpager::fetch","github\\resultpager::fetchall","github\\resultpager::postfetch","github\\resultpager::hasnext","github\\resultpager::fetchnext","github\\resultpager::hasprevious","github\\resultpager::fetchprevious","github\\resultpager::fetchfirst","github\\resultpager::fetchlast","github\\resultpagerinterface::getpagination","github\\resultpagerinterface::fetch","github\\resultpagerinterface::fetchall","github\\resultpagerinterface::postfetch","github\\resultpagerinterface::hasnext","github\\resultpagerinterface::hasprevious","github\\resultpagerinterface::fetchnext","github\\resultpagerinterface::fetchprevious","github\\resultpagerinterface::fetchfirst","github\\resultpagerinterface::fetchlast"],
        'info': [["Github","","Github.html","","",3],["Github\\Api","","Github\/Api.html","","",3],["Github\\Api\\CurrentUser","","Github\/Api\/CurrentUser.html","","",3],["Github\\Api\\Enterprise","","Github\/Api\/Enterprise.html","","",3],["Github\\Api\\GitData","","Github\/Api\/GitData.html","","",3],["Github\\Api\\Issue","","Github\/Api\/Issue.html","","",3],["Github\\Api\\Organization","","Github\/Api\/Organization.html","","",3],["Github\\Api\\PullRequest","","Github\/Api\/PullRequest.html","","",3],["Github\\Api\\Repository","","Github\/Api\/Repository.html","","",3],["Github\\Exception","","Github\/Exception.html","","",3],["Github\\HttpClient","","Github\/HttpClient.html","","",3],["Github\\HttpClient\\Cache","","Github\/HttpClient\/Cache.html","","",3],["Github\\HttpClient\\Listener","","Github\/HttpClient\/Listener.html","","",3],["Github\\HttpClient\\Message","","Github\/HttpClient\/Message.html","","",3],["AbstractApi","Github\\Api","Github\/Api\/AbstractApi.html","","Abstract class for Api classes",1],["ApiInterface","Github\\Api","Github\/Api\/ApiInterface.html","","Api interface",1],["Authorizations","Github\\Api","Github\/Api\/Authorizations.html"," < AbstractApi","Creating, deleting and listing authorizations",1],["CurrentUser","Github\\Api","Github\/Api\/CurrentUser.html"," < AbstractApi","",1],["DeployKeys","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser\/DeployKeys.html"," < AbstractApi","",1],["Emails","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser\/Emails.html"," < AbstractApi","",1],["Followers","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser\/Followers.html"," < AbstractApi","",1],["Notifications","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser\/Notifications.html"," < AbstractApi","",1],["Starring","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser\/Starring.html"," < AbstractApi","",1],["Watchers","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser\/Watchers.html"," < AbstractApi","",1],["Enterprise","Github\\Api","Github\/Api\/Enterprise.html"," < AbstractApi","Getting information about a GitHub Enterprise instance.",1],["License","Github\\Api\\Enterprise","Github\/Api\/Enterprise\/License.html"," < AbstractApi","",1],["Stats","Github\\Api\\Enterprise","Github\/Api\/Enterprise\/Stats.html"," < AbstractApi","",1],["Gists","Github\\Api","Github\/Api\/Gists.html"," < AbstractApi","Creating, editing, deleting and listing gists",1],["GitData","Github\\Api","Github\/Api\/GitData.html"," < AbstractApi","Getting full versions of specific files and trees in",1],["Blobs","Github\\Api\\GitData","Github\/Api\/GitData\/Blobs.html"," < AbstractApi","",1],["Commits","Github\\Api\\GitData","Github\/Api\/GitData\/Commits.html"," < AbstractApi","",1],["References","Github\\Api\\GitData","Github\/Api\/GitData\/References.html"," < AbstractApi","",1],["Tags","Github\\Api\\GitData","Github\/Api\/GitData\/Tags.html"," < AbstractApi","",1],["Trees","Github\\Api\\GitData","Github\/Api\/GitData\/Trees.html"," < AbstractApi","",1],["Issue","Github\\Api","Github\/Api\/Issue.html"," < AbstractApi","Listing issues, searching, editing and closing your",1],["Comments","Github\\Api\\Issue","Github\/Api\/Issue\/Comments.html"," < AbstractApi","",1],["Events","Github\\Api\\Issue","Github\/Api\/Issue\/Events.html"," < AbstractApi","",1],["Labels","Github\\Api\\Issue","Github\/Api\/Issue\/Labels.html"," < AbstractApi","",1],["Milestones","Github\\Api\\Issue","Github\/Api\/Issue\/Milestones.html"," < AbstractApi","",1],["Markdown","Github\\Api","Github\/Api\/Markdown.html"," < AbstractApi","Markdown Rendering API",1],["Meta","Github\\Api","Github\/Api\/Meta.html"," < AbstractApi","Getting GitHub service information",1],["Organization","Github\\Api","Github\/Api\/Organization.html"," < AbstractApi","Getting organization information and managing authenticated",1],["Members","Github\\Api\\Organization","Github\/Api\/Organization\/Members.html"," < AbstractApi","",1],["Teams","Github\\Api\\Organization","Github\/Api\/Organization\/Teams.html"," < AbstractApi","",1],["PullRequest","Github\\Api","Github\/Api\/PullRequest.html"," < AbstractApi","API for accessing Pull Requests from your Git\/Github",1],["Comments","Github\\Api\\PullRequest","Github\/Api\/PullRequest\/Comments.html"," < AbstractApi","",1],["Repo","Github\\Api","Github\/Api\/Repo.html"," < AbstractApi","Searching repositories, getting repository information",1],["Assets","Github\\Api\\Repository","Github\/Api\/Repository\/Assets.html"," < AbstractApi","",1],["Collaborators","Github\\Api\\Repository","Github\/Api\/Repository\/Collaborators.html"," < AbstractApi","",1],["Comments","Github\\Api\\Repository","Github\/Api\/Repository\/Comments.html"," < AbstractApi","",1],["Commits","Github\\Api\\Repository","Github\/Api\/Repository\/Commits.html"," < AbstractApi","",1],["Contents","Github\\Api\\Repository","Github\/Api\/Repository\/Contents.html"," < AbstractApi","",1],["DeployKeys","Github\\Api\\Repository","Github\/Api\/Repository\/DeployKeys.html"," < AbstractApi","",1],["Downloads","Github\\Api\\Repository","Github\/Api\/Repository\/Downloads.html"," < AbstractApi","",1],["Forks","Github\\Api\\Repository","Github\/Api\/Repository\/Forks.html"," < AbstractApi","",1],["Hooks","Github\\Api\\Repository","Github\/Api\/Repository\/Hooks.html"," < AbstractApi","",1],["Labels","Github\\Api\\Repository","Github\/Api\/Repository\/Labels.html"," < AbstractApi","",1],["Releases","Github\\Api\\Repository","Github\/Api\/Repository\/Releases.html"," < AbstractApi","",1],["Statuses","Github\\Api\\Repository","Github\/Api\/Repository\/Statuses.html"," < AbstractApi","",1],["User","Github\\Api","Github\/Api\/User.html"," < AbstractApi","Searching users, getting user information",1],["Client","Github","Github\/Client.html","","Simple yet very cool PHP GitHub client",1],["ApiLimitExceedException","Github\\Exception","Github\/Exception\/ApiLimitExceedException.html"," < RuntimeException","ApiLimitExceedException",1],["BadMethodCallException","Github\\Exception","Github\/Exception\/BadMethodCallException.html"," < BadMethodCallException","BadMethodCallException",1],["ErrorException","Github\\Exception","Github\/Exception\/ErrorException.html"," < ErrorException","ErrorException",1],["ExceptionInterface","Github\\Exception","Github\/Exception\/ExceptionInterface.html","","",1],["InvalidArgumentException","Github\\Exception","Github\/Exception\/InvalidArgumentException.html"," < InvalidArgumentException","InvalidArgumentException",1],["MissingArgumentException","Github\\Exception","Github\/Exception\/MissingArgumentException.html"," < ErrorException","MissingArgumentException",1],["RuntimeException","Github\\Exception","Github\/Exception\/RuntimeException.html"," < RuntimeException","RuntimeException",1],["TwoFactorAuthenticationRequiredException","Github\\Exception","Github\/Exception\/TwoFactorAuthenticationRequiredException.html"," < RuntimeException","",1],["ValidationFailedException","Github\\Exception","Github\/Exception\/ValidationFailedException.html"," < ErrorException","ValidationFailedException",1],["CacheInterface","Github\\HttpClient\\Cache","Github\/HttpClient\/Cache\/CacheInterface.html","","Caches github api responses",1],["FilesystemCache","Github\\HttpClient\\Cache","Github\/HttpClient\/Cache\/FilesystemCache.html","","",1],["GaufretteCache","Github\\HttpClient\\Cache","Github\/HttpClient\/Cache\/GaufretteCache.html","","Gaufrette Cache",1],["CachedHttpClient","Github\\HttpClient","Github\/HttpClient\/CachedHttpClient.html"," < HttpClient","Performs requests on GitHub API using If-Modified-Since",1],["HttpClient","Github\\HttpClient","Github\/HttpClient\/HttpClient.html","","Performs requests on GitHub API.",1],["HttpClientInterface","Github\\HttpClient","Github\/HttpClient\/HttpClientInterface.html","","Performs requests on GitHub API.",1],["AuthListener","Github\\HttpClient\\Listener","Github\/HttpClient\/Listener\/AuthListener.html","","",1],["ErrorListener","Github\\HttpClient\\Listener","Github\/HttpClient\/Listener\/ErrorListener.html","","",1],["ResponseMediator","Github\\HttpClient\\Message","Github\/HttpClient\/Message\/ResponseMediator.html","","",1],["ResultPager","Github","Github\/ResultPager.html","","Pager class for supporting pagination in github classes",1],["ResultPagerInterface","Github","Github\/ResultPagerInterface.html","","Pager interface",1],["AbstractApi::__construct","Github\\Api\\AbstractApi","Github\/Api\/AbstractApi.html#method___construct","(<a href=\"Github\/Client.html\"><abbr title=\"Github\\Client\">Client<\/abbr><\/a> $client)","",2],["AbstractApi::configure","Github\\Api\\AbstractApi","Github\/Api\/AbstractApi.html#method_configure","()","",2],["AbstractApi::getPerPage","Github\\Api\\AbstractApi","Github\/Api\/AbstractApi.html#method_getPerPage","()","",2],["AbstractApi::setPerPage","Github\\Api\\AbstractApi","Github\/Api\/AbstractApi.html#method_setPerPage","(null|int $perPage)","",2],["ApiInterface::getPerPage","Github\\Api\\ApiInterface","Github\/Api\/ApiInterface.html#method_getPerPage","()","",2],["ApiInterface::setPerPage","Github\\Api\\ApiInterface","Github\/Api\/ApiInterface.html#method_setPerPage","($perPage)","",2],["Authorizations::all","Github\\Api\\Authorizations","Github\/Api\/Authorizations.html#method_all","()","",2],["Authorizations::show","Github\\Api\\Authorizations","Github\/Api\/Authorizations.html#method_show","($number)","",2],["Authorizations::create","Github\\Api\\Authorizations","Github\/Api\/Authorizations.html#method_create","(array $params, $OTPCode = null)","",2],["Authorizations::update","Github\\Api\\Authorizations","Github\/Api\/Authorizations.html#method_update","($id, array $params)","",2],["Authorizations::remove","Github\\Api\\Authorizations","Github\/Api\/Authorizations.html#method_remove","($id)","",2],["Authorizations::check","Github\\Api\\Authorizations","Github\/Api\/Authorizations.html#method_check","($id, $token)","",2],["CurrentUser::show","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_show","()","",2],["CurrentUser::update","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_update","(array $params)","",2],["CurrentUser::emails","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_emails","()","",2],["CurrentUser::follow","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_follow","()","",2],["CurrentUser::followers","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_followers","($page = 1)","",2],["CurrentUser::issues","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_issues","(array $params = array(), boolean $includeOrgIssues = true)","",2],["CurrentUser::keys","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_keys","()","",2],["CurrentUser::notifications","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_notifications","()","",2],["CurrentUser::organizations","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_organizations","()","",2],["CurrentUser::repositories","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_repositories","(string $type = &#039;owner&#039;, string $sort = &#039;full_name&#039;, string $direction = &#039;asc&#039;)","",2],["CurrentUser::watchers","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_watchers","()","",2],["CurrentUser::watched","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_watched","($page = 1)","",2],["CurrentUser::starring","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_starring","()","",2],["CurrentUser::starred","Github\\Api\\CurrentUser","Github\/Api\/CurrentUser.html#method_starred","($page = 1)","",2],["DeployKeys::all","Github\\Api\\CurrentUser\\DeployKeys","Github\/Api\/CurrentUser\/DeployKeys.html#method_all","()","List deploy keys for the authenticated user",2],["DeployKeys::show","Github\\Api\\CurrentUser\\DeployKeys","Github\/Api\/CurrentUser\/DeployKeys.html#method_show","(string $id)","Shows deploy key for the authenticated user",2],["DeployKeys::create","Github\\Api\\CurrentUser\\DeployKeys","Github\/Api\/CurrentUser\/DeployKeys.html#method_create","(array $params)","Adds deploy key for the authenticated user",2],["DeployKeys::update","Github\\Api\\CurrentUser\\DeployKeys","Github\/Api\/CurrentUser\/DeployKeys.html#method_update","(string $id, array $params)","Updates deploy key for the authenticated user",2],["DeployKeys::remove","Github\\Api\\CurrentUser\\DeployKeys","Github\/Api\/CurrentUser\/DeployKeys.html#method_remove","(string $id)","Removes deploy key for the authenticated user",2],["Emails::all","Github\\Api\\CurrentUser\\Emails","Github\/Api\/CurrentUser\/Emails.html#method_all","()","List emails for the authenticated user",2],["Emails::add","Github\\Api\\CurrentUser\\Emails","Github\/Api\/CurrentUser\/Emails.html#method_add","(string|array $emails)","Adds one or more email for the authenticated user",2],["Emails::remove","Github\\Api\\CurrentUser\\Emails","Github\/Api\/CurrentUser\/Emails.html#method_remove","(string|array $emails)","Removes one or more email for the authenticated user",2],["Followers::all","Github\\Api\\CurrentUser\\Followers","Github\/Api\/CurrentUser\/Followers.html#method_all","(integer $page = 1)","List followed users by the authenticated user",2],["Followers::check","Github\\Api\\CurrentUser\\Followers","Github\/Api\/CurrentUser\/Followers.html#method_check","(string $username)","Check that the authenticated user follows a user",2],["Followers::follow","Github\\Api\\CurrentUser\\Followers","Github\/Api\/CurrentUser\/Followers.html#method_follow","(string $username)","Make the authenticated user follow a user",2],["Followers::unfollow","Github\\Api\\CurrentUser\\Followers","Github\/Api\/CurrentUser\/Followers.html#method_unfollow","(string $username)","Make the authenticated user un-follow a user",2],["Notifications::all","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_all","(array $params = array())","List all notifications for the authenticated user",2],["Notifications::allInRepository","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_allInRepository","(string $username, string $repository, array $params = array())","List all notifications for the authenticated user in",2],["Notifications::markAsReadAll","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_markAsReadAll","(array $params = array())","",2],["Notifications::markAsReadInRepository","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_markAsReadInRepository","(string $username, string $repository, array $params = array())","",2],["Notifications::markAsRead","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_markAsRead","(string $id, array $params)","",2],["Notifications::show","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_show","(string $id)","",2],["Notifications::showSubscription","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_showSubscription","(string $id)","",2],["Notifications::createSubscription","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_createSubscription","(string $id, array $params)","",2],["Notifications::removeSubscription","Github\\Api\\CurrentUser\\Notifications","Github\/Api\/CurrentUser\/Notifications.html#method_removeSubscription","(string $id)","",2],["Starring::all","Github\\Api\\CurrentUser\\Starring","Github\/Api\/CurrentUser\/Starring.html#method_all","(integer $page = 1)","List repositories starred by the authenticated user",2],["Starring::check","Github\\Api\\CurrentUser\\Starring","Github\/Api\/CurrentUser\/Starring.html#method_check","(string $username, string $repository)","Check that the authenticated user starres a repository",2],["Starring::star","Github\\Api\\CurrentUser\\Starring","Github\/Api\/CurrentUser\/Starring.html#method_star","(string $username, string $repository)","Make the authenticated user star a repository",2],["Starring::unstar","Github\\Api\\CurrentUser\\Starring","Github\/Api\/CurrentUser\/Starring.html#method_unstar","(string $username, string $repository)","Make the authenticated user unstar a repository",2],["Watchers::all","Github\\Api\\CurrentUser\\Watchers","Github\/Api\/CurrentUser\/Watchers.html#method_all","(integer $page = 1)","List repositories watched by the authenticated user",2],["Watchers::check","Github\\Api\\CurrentUser\\Watchers","Github\/Api\/CurrentUser\/Watchers.html#method_check","(string $username, string $repository)","Check that the authenticated user watches a repository",2],["Watchers::watch","Github\\Api\\CurrentUser\\Watchers","Github\/Api\/CurrentUser\/Watchers.html#method_watch","(string $username, string $repository)","Make the authenticated user watch a repository",2],["Watchers::unwatch","Github\\Api\\CurrentUser\\Watchers","Github\/Api\/CurrentUser\/Watchers.html#method_unwatch","(string $username, string $repository)","Make the authenticated user unwatch a repository",2],["Enterprise::stats","Github\\Api\\Enterprise","Github\/Api\/Enterprise.html#method_stats","()","",2],["Enterprise::license","Github\\Api\\Enterprise","Github\/Api\/Enterprise.html#method_license","()","",2],["License::show","Github\\Api\\Enterprise\\License","Github\/Api\/Enterprise\/License.html#method_show","()","Provides information about your Enterprise license",2],["Stats::issues","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_issues","()","Returns the number of open and closed issues",2],["Stats::hooks","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_hooks","()","Returns the number of active and inactive hooks",2],["Stats::milestones","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_milestones","()","Returns the number of open and closed milestones",2],["Stats::orgs","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_orgs","()","Returns the number of organizations, teams, team members,",2],["Stats::comments","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_comments","()","Returns the number of comments on issues, pull requests,",2],["Stats::pages","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_pages","()","Returns the number of GitHub Pages sites",2],["Stats::users","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_users","()","Returns the number of suspended and admin users",2],["Stats::gists","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_gists","()","Returns the number of private and public gists",2],["Stats::pulls","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_pulls","()","Returns the number of merged, mergeable, and unmergeable",2],["Stats::repos","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_repos","()","Returns the number of organization-owned repositories,",2],["Stats::all","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_all","()","Returns all of the statistics",2],["Stats::show","Github\\Api\\Enterprise\\Stats","Github\/Api\/Enterprise\/Stats.html#method_show","(string $type)","",2],["Gists::all","Github\\Api\\Gists","Github\/Api\/Gists.html#method_all","($type = null)","",2],["Gists::show","Github\\Api\\Gists","Github\/Api\/Gists.html#method_show","($number)","",2],["Gists::create","Github\\Api\\Gists","Github\/Api\/Gists.html#method_create","(array $params)","",2],["Gists::update","Github\\Api\\Gists","Github\/Api\/Gists.html#method_update","($id, array $params)","",2],["Gists::fork","Github\\Api\\Gists","Github\/Api\/Gists.html#method_fork","($id)","",2],["Gists::remove","Github\\Api\\Gists","Github\/Api\/Gists.html#method_remove","($id)","",2],["Gists::check","Github\\Api\\Gists","Github\/Api\/Gists.html#method_check","($id)","",2],["Gists::star","Github\\Api\\Gists","Github\/Api\/Gists.html#method_star","($id)","",2],["Gists::unstar","Github\\Api\\Gists","Github\/Api\/Gists.html#method_unstar","($id)","",2],["GitData::blobs","Github\\Api\\GitData","Github\/Api\/GitData.html#method_blobs","()","",2],["GitData::commits","Github\\Api\\GitData","Github\/Api\/GitData.html#method_commits","()","",2],["GitData::references","Github\\Api\\GitData","Github\/Api\/GitData.html#method_references","()","",2],["GitData::tags","Github\\Api\\GitData","Github\/Api\/GitData.html#method_tags","()","",2],["GitData::trees","Github\\Api\\GitData","Github\/Api\/GitData.html#method_trees","()","",2],["Blobs::configure","Github\\Api\\GitData\\Blobs","Github\/Api\/GitData\/Blobs.html#method_configure","($bodyType = null)","",2],["Blobs::show","Github\\Api\\GitData\\Blobs","Github\/Api\/GitData\/Blobs.html#method_show","($username, $repository, $sha)","",2],["Blobs::create","Github\\Api\\GitData\\Blobs","Github\/Api\/GitData\/Blobs.html#method_create","($username, $repository, array $params)","",2],["Commits::show","Github\\Api\\GitData\\Commits","Github\/Api\/GitData\/Commits.html#method_show","($username, $repository, $sha)","",2],["Commits::create","Github\\Api\\GitData\\Commits","Github\/Api\/GitData\/Commits.html#method_create","($username, $repository, array $params)","",2],["References::all","Github\\Api\\GitData\\References","Github\/Api\/GitData\/References.html#method_all","($username, $repository)","",2],["References::branches","Github\\Api\\GitData\\References","Github\/Api\/GitData\/References.html#method_branches","($username, $repository)","",2],["References::tags","Github\\Api\\GitData\\References","Github\/Api\/GitData\/References.html#method_tags","($username, $repository)","",2],["References::show","Github\\Api\\GitData\\References","Github\/Api\/GitData\/References.html#method_show","($username, $repository, $reference)","",2],["References::create","Github\\Api\\GitData\\References","Github\/Api\/GitData\/References.html#method_create","($username, $repository, array $params)","",2],["References::update","Github\\Api\\GitData\\References","Github\/Api\/GitData\/References.html#method_update","($username, $repository, $reference, array $params)","",2],["References::remove","Github\\Api\\GitData\\References","Github\/Api\/GitData\/References.html#method_remove","($username, $repository, $reference)","",2],["Tags::all","Github\\Api\\GitData\\Tags","Github\/Api\/GitData\/Tags.html#method_all","($username, $repository)","",2],["Tags::show","Github\\Api\\GitData\\Tags","Github\/Api\/GitData\/Tags.html#method_show","($username, $repository, $sha)","",2],["Tags::create","Github\\Api\\GitData\\Tags","Github\/Api\/GitData\/Tags.html#method_create","($username, $repository, array $params)","",2],["Trees::show","Github\\Api\\GitData\\Trees","Github\/Api\/GitData\/Trees.html#method_show","($username, $repository, $sha, $recursive = false)","",2],["Trees::create","Github\\Api\\GitData\\Trees","Github\/Api\/GitData\/Trees.html#method_create","($username, $repository, array $params)","",2],["Issue::all","Github\\Api\\Issue","Github\/Api\/Issue.html#method_all","(string $username, string $repository, array $params = array())","List issues by username, repo and state",2],["Issue::find","Github\\Api\\Issue","Github\/Api\/Issue.html#method_find","(string $username, string $repository, string $state, string $keyword)","Search issues by username, repo, state and keyword",2],["Issue::org","Github\\Api\\Issue","Github\/Api\/Issue.html#method_org","(string $organization, string $state, array $params = array())","List issues by organization",2],["Issue::show","Github\\Api\\Issue","Github\/Api\/Issue.html#method_show","(string $username, string $repository, string $id)","Get extended information about an issue by its username,",2],["Issue::create","Github\\Api\\Issue","Github\/Api\/Issue.html#method_create","(string $username, string $repository, array $params)","Create a new issue for the given username and repo.",2],["Issue::update","Github\\Api\\Issue","Github\/Api\/Issue.html#method_update","(string $username, string $repository, string $id, array $params)","Update issue information's by username, repo and issue",2],["Issue::comments","Github\\Api\\Issue","Github\/Api\/Issue.html#method_comments","()","List an issue comments",2],["Issue::events","Github\\Api\\Issue","Github\/Api\/Issue.html#method_events","()","List all project events",2],["Issue::labels","Github\\Api\\Issue","Github\/Api\/Issue.html#method_labels","()","List all project labels",2],["Issue::milestones","Github\\Api\\Issue","Github\/Api\/Issue.html#method_milestones","()","List all project milestones",2],["Comments::configure","Github\\Api\\Issue\\Comments","Github\/Api\/Issue\/Comments.html#method_configure","($bodyType = null)","",2],["Comments::all","Github\\Api\\Issue\\Comments","Github\/Api\/Issue\/Comments.html#method_all","($username, $repository, $issue, $page = 1)","",2],["Comments::show","Github\\Api\\Issue\\Comments","Github\/Api\/Issue\/Comments.html#method_show","($username, $repository, $comment)","",2],["Comments::create","Github\\Api\\Issue\\Comments","Github\/Api\/Issue\/Comments.html#method_create","($username, $repository, $issue, array $params)","",2],["Comments::update","Github\\Api\\Issue\\Comments","Github\/Api\/Issue\/Comments.html#method_update","($username, $repository, $comment, array $params)","",2],["Comments::remove","Github\\Api\\Issue\\Comments","Github\/Api\/Issue\/Comments.html#method_remove","($username, $repository, $comment)","",2],["Events::all","Github\\Api\\Issue\\Events","Github\/Api\/Issue\/Events.html#method_all","($username, $repository, $issue = null, $page = 1)","",2],["Events::show","Github\\Api\\Issue\\Events","Github\/Api\/Issue\/Events.html#method_show","($username, $repository, $event)","",2],["Labels::all","Github\\Api\\Issue\\Labels","Github\/Api\/Issue\/Labels.html#method_all","($username, $repository, $issue = null)","",2],["Labels::create","Github\\Api\\Issue\\Labels","Github\/Api\/Issue\/Labels.html#method_create","($username, $repository, array $params)","",2],["Labels::add","Github\\Api\\Issue\\Labels","Github\/Api\/Issue\/Labels.html#method_add","($username, $repository, $issue, $labels)","",2],["Labels::replace","Github\\Api\\Issue\\Labels","Github\/Api\/Issue\/Labels.html#method_replace","($username, $repository, $issue, array $params)","",2],["Labels::remove","Github\\Api\\Issue\\Labels","Github\/Api\/Issue\/Labels.html#method_remove","($username, $repository, $issue, $label)","",2],["Labels::clear","Github\\Api\\Issue\\Labels","Github\/Api\/Issue\/Labels.html#method_clear","($username, $repository, $issue)","",2],["Milestones::all","Github\\Api\\Issue\\Milestones","Github\/Api\/Issue\/Milestones.html#method_all","($username, $repository, array $params = array())","",2],["Milestones::show","Github\\Api\\Issue\\Milestones","Github\/Api\/Issue\/Milestones.html#method_show","($username, $repository, $id)","",2],["Milestones::create","Github\\Api\\Issue\\Milestones","Github\/Api\/Issue\/Milestones.html#method_create","($username, $repository, array $params)","",2],["Milestones::update","Github\\Api\\Issue\\Milestones","Github\/Api\/Issue\/Milestones.html#method_update","($username, $repository, $milestone, array $params)","",2],["Milestones::remove","Github\\Api\\Issue\\Milestones","Github\/Api\/Issue\/Milestones.html#method_remove","($username, $repository, $milestone)","",2],["Milestones::labels","Github\\Api\\Issue\\Milestones","Github\/Api\/Issue\/Milestones.html#method_labels","($username, $repository, $milestone)","",2],["Markdown::render","Github\\Api\\Markdown","Github\/Api\/Markdown.html#method_render","(string $text, string $mode = &#039;markdown&#039;, string $context = null)","",2],["Markdown::renderRaw","Github\\Api\\Markdown","Github\/Api\/Markdown.html#method_renderRaw","(string $file)","",2],["Meta::service","Github\\Api\\Meta","Github\/Api\/Meta.html#method_service","()","Get the ip address of the hook and git servers for",2],["Organization::show","Github\\Api\\Organization","Github\/Api\/Organization.html#method_show","(string $organization)","Get extended information about an organization by its",2],["Organization::update","Github\\Api\\Organization","Github\/Api\/Organization.html#method_update","($organization, array $params)","",2],["Organization::repositories","Github\\Api\\Organization","Github\/Api\/Organization.html#method_repositories","(string $organization, string $type = &#039;all&#039;)","List all repositories across all the organizations",2],["Organization::members","Github\\Api\\Organization","Github\/Api\/Organization.html#method_members","()","",2],["Organization::teams","Github\\Api\\Organization","Github\/Api\/Organization.html#method_teams","()","",2],["Members::all","Github\\Api\\Organization\\Members","Github\/Api\/Organization\/Members.html#method_all","($organization, $type = null, $filter = &#039;all&#039;)","",2],["Members::show","Github\\Api\\Organization\\Members","Github\/Api\/Organization\/Members.html#method_show","($organization, $username)","",2],["Members::check","Github\\Api\\Organization\\Members","Github\/Api\/Organization\/Members.html#method_check","($organization, $username)","",2],["Members::publicize","Github\\Api\\Organization\\Members","Github\/Api\/Organization\/Members.html#method_publicize","($organization, $username)","",2],["Members::conceal","Github\\Api\\Organization\\Members","Github\/Api\/Organization\/Members.html#method_conceal","($organization, $username)","",2],["Members::remove","Github\\Api\\Organization\\Members","Github\/Api\/Organization\/Members.html#method_remove","($organization, $username)","",2],["Teams::all","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_all","($organization)","",2],["Teams::create","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_create","($organization, array $params)","",2],["Teams::show","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_show","($team)","",2],["Teams::update","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_update","($team, array $params)","",2],["Teams::remove","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_remove","($team)","",2],["Teams::members","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_members","($team)","",2],["Teams::check","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_check","($team, $username)","",2],["Teams::addMember","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_addMember","($team, $username)","",2],["Teams::removeMember","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_removeMember","($team, $username)","",2],["Teams::repositories","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_repositories","($team)","",2],["Teams::repository","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_repository","($team, $username, $repository)","",2],["Teams::addRepository","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_addRepository","($team, $username, $repository)","",2],["Teams::removeRepository","Github\\Api\\Organization\\Teams","Github\/Api\/Organization\/Teams.html#method_removeRepository","($team, $username, $repository)","",2],["PullRequest::all","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_all","(string $username, string $repository, array $params = array())","Get a listing of a project's pull requests by the username,",2],["PullRequest::show","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_show","(string $username, string $repository, string $id)","Show all details of a pull request, including the discussions.",2],["PullRequest::commits","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_commits","($username, $repository, $id)","",2],["PullRequest::files","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_files","($username, $repository, $id)","",2],["PullRequest::comments","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_comments","()","",2],["PullRequest::create","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_create","(string $username, string $repository, array $params)","Create a pull request",2],["PullRequest::update","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_update","($username, $repository, $id, array $params)","",2],["PullRequest::merged","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_merged","($username, $repository, $id)","",2],["PullRequest::merge","Github\\Api\\PullRequest","Github\/Api\/PullRequest.html#method_merge","($username, $repository, $id, $message = null)","",2],["Comments::all","Github\\Api\\PullRequest\\Comments","Github\/Api\/PullRequest\/Comments.html#method_all","($username, $repository, $pullRequest)","",2],["Comments::show","Github\\Api\\PullRequest\\Comments","Github\/Api\/PullRequest\/Comments.html#method_show","($username, $repository, $comment)","",2],["Comments::create","Github\\Api\\PullRequest\\Comments","Github\/Api\/PullRequest\/Comments.html#method_create","($username, $repository, $pullRequest, array $params)","",2],["Comments::update","Github\\Api\\PullRequest\\Comments","Github\/Api\/PullRequest\/Comments.html#method_update","($username, $repository, $comment, array $params)","",2],["Comments::remove","Github\\Api\\PullRequest\\Comments","Github\/Api\/PullRequest\/Comments.html#method_remove","($username, $repository, $comment)","",2],["Repo::find","Github\\Api\\Repo","Github\/Api\/Repo.html#method_find","(string $keyword, array $params = array())","Search repositories by keyword:",2],["Repo::activity","Github\\Api\\Repo","Github\/Api\/Repo.html#method_activity","(string $username, string $repository)","Get the last year of commit activity for a repository",2],["Repo::statistics","Github\\Api\\Repo","Github\/Api\/Repo.html#method_statistics","(string $username, string $repository)","Get contributor commit statistics for a repository",2],["Repo::org","Github\\Api\\Repo","Github\/Api\/Repo.html#method_org","(string $organization, array $params = array())","List all repositories for an organization",2],["Repo::show","Github\\Api\\Repo","Github\/Api\/Repo.html#method_show","(string $username, string $repository)","Get extended information about a repository by its",2],["Repo::create","Github\\Api\\Repo","Github\/Api\/Repo.html#method_create","($name, $description = &#039;&#039;, $homepage = &#039;&#039;, $public = true, $organization = null, $hasIssues = false, $hasWiki = false, $hasDownloads = false, $teamId = null, $autoInit = false)","Create repository",2],["Repo::update","Github\\Api\\Repo","Github\/Api\/Repo.html#method_update","(string $username, string $repository, array $values)","Set information of a repository",2],["Repo::remove","Github\\Api\\Repo","Github\/Api\/Repo.html#method_remove","(string $username, string $repository)","Delete a repository",2],["Repo::readme","Github\\Api\\Repo","Github\/Api\/Repo.html#method_readme","(string $username, string $repository)","Get the readme content for a repository by its username",2],["Repo::collaborators","Github\\Api\\Repo","Github\/Api\/Repo.html#method_collaborators","()","Manage the collaborators of a repository",2],["Repo::comments","Github\\Api\\Repo","Github\/Api\/Repo.html#method_comments","()","Manage the comments of a repository",2],["Repo::commits","Github\\Api\\Repo","Github\/Api\/Repo.html#method_commits","()","Manage the commits of a repository",2],["Repo::contents","Github\\Api\\Repo","Github\/Api\/Repo.html#method_contents","()","Manage the content of a repository",2],["Repo::downloads","Github\\Api\\Repo","Github\/Api\/Repo.html#method_downloads","()","Manage the content of a repository",2],["Repo::releases","Github\\Api\\Repo","Github\/Api\/Repo.html#method_releases","()","Manage the releases of a repository (Currently Undocumented)",2],["Repo::keys","Github\\Api\\Repo","Github\/Api\/Repo.html#method_keys","()","Manage the deploy keys of a repository",2],["Repo::forks","Github\\Api\\Repo","Github\/Api\/Repo.html#method_forks","()","Manage the forks of a repository",2],["Repo::hooks","Github\\Api\\Repo","Github\/Api\/Repo.html#method_hooks","()","Manage the hooks of a repository",2],["Repo::labels","Github\\Api\\Repo","Github\/Api\/Repo.html#method_labels","()","Manage the labels of a repository",2],["Repo::statuses","Github\\Api\\Repo","Github\/Api\/Repo.html#method_statuses","()","Manage the statuses of a repository",2],["Repo::branches","Github\\Api\\Repo","Github\/Api\/Repo.html#method_branches","(string $username, string $repository, string $branch = null)","Get the branch(es) of a repository",2],["Repo::contributors","Github\\Api\\Repo","Github\/Api\/Repo.html#method_contributors","(string $username, string $repository, boolean $includingAnonymous = false)","Get the contributors of a repository",2],["Repo::languages","Github\\Api\\Repo","Github\/Api\/Repo.html#method_languages","(string $username, string $repository)","Get the language breakdown of a repository",2],["Repo::tags","Github\\Api\\Repo","Github\/Api\/Repo.html#method_tags","(string $username, string $repository)","Get the tags of a repository",2],["Repo::teams","Github\\Api\\Repo","Github\/Api\/Repo.html#method_teams","(string $username, string $repository)","Get the teams of a repository",2],["Repo::watchers","Github\\Api\\Repo","Github\/Api\/Repo.html#method_watchers","(string $username, string $repository, integer $page = 1)","",2],["Repo::subscribers","Github\\Api\\Repo","Github\/Api\/Repo.html#method_subscribers","(string $username, string $repository, integer $page = 1)","",2],["Repo::merge","Github\\Api\\Repo","Github\/Api\/Repo.html#method_merge","(string $username, string $repository, string $base, string $head, string $message = null)","Perform a merge",2],["Assets::all","Github\\Api\\Repository\\Assets","Github\/Api\/Repository\/Assets.html#method_all","(string $username, string $repository, integer $id)","Get all release's assets in selected repository GET",2],["Assets::show","Github\\Api\\Repository\\Assets","Github\/Api\/Repository\/Assets.html#method_show","(string $username, string $repository, integer $id)","Get an asset in selected repository's release GET \/repos\/:owner\/:repo\/releases\/assets\/:id",2],["Assets::getContent","Github\\Api\\Repository\\Assets","Github\/Api\/Repository\/Assets.html#method_getContent","(string $username, string $repository, integer $id)","Get an asset in selected repository's release GET \/repos\/:owner\/:repo\/releases\/assets\/:id",2],["Assets::create","Github\\Api\\Repository\\Assets","Github\/Api\/Repository\/Assets.html#method_create","(string $username, string $repository, integer $id, string $name, string $contentType, string $content)","Create an asset for selected repository's release POST",2],["Assets::edit","Github\\Api\\Repository\\Assets","Github\/Api\/Repository\/Assets.html#method_edit","(string $username, string $repository, integer $id, array $params)","Edit an asset in selected repository's release PATCH",2],["Assets::remove","Github\\Api\\Repository\\Assets","Github\/Api\/Repository\/Assets.html#method_remove","(string $username, string $repository, integer $id)","Delete an asset in selected repository's release DELETE",2],["Collaborators::all","Github\\Api\\Repository\\Collaborators","Github\/Api\/Repository\/Collaborators.html#method_all","($username, $repository)","",2],["Collaborators::check","Github\\Api\\Repository\\Collaborators","Github\/Api\/Repository\/Collaborators.html#method_check","($username, $repository, $collaborator)","",2],["Collaborators::add","Github\\Api\\Repository\\Collaborators","Github\/Api\/Repository\/Collaborators.html#method_add","($username, $repository, $collaborator)","",2],["Collaborators::remove","Github\\Api\\Repository\\Collaborators","Github\/Api\/Repository\/Collaborators.html#method_remove","($username, $repository, $collaborator)","",2],["Comments::configure","Github\\Api\\Repository\\Comments","Github\/Api\/Repository\/Comments.html#method_configure","($bodyType = null)","",2],["Comments::all","Github\\Api\\Repository\\Comments","Github\/Api\/Repository\/Comments.html#method_all","($username, $repository, $sha = null)","",2],["Comments::show","Github\\Api\\Repository\\Comments","Github\/Api\/Repository\/Comments.html#method_show","($username, $repository, $comment)","",2],["Comments::create","Github\\Api\\Repository\\Comments","Github\/Api\/Repository\/Comments.html#method_create","($username, $repository, $sha, array $params)","",2],["Comments::update","Github\\Api\\Repository\\Comments","Github\/Api\/Repository\/Comments.html#method_update","($username, $repository, $comment, array $params)","",2],["Comments::remove","Github\\Api\\Repository\\Comments","Github\/Api\/Repository\/Comments.html#method_remove","($username, $repository, $comment)","",2],["Commits::all","Github\\Api\\Repository\\Commits","Github\/Api\/Repository\/Commits.html#method_all","($username, $repository, array $params)","",2],["Commits::compare","Github\\Api\\Repository\\Commits","Github\/Api\/Repository\/Commits.html#method_compare","($username, $repository, $base, $head, $mediaType = NULL)","",2],["Commits::show","Github\\Api\\Repository\\Commits","Github\/Api\/Repository\/Commits.html#method_show","($username, $repository, $sha)","",2],["Contents::readme","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_readme","(string $username, string $repository, null|string $reference = null)","Get content of README file in a repository",2],["Contents::show","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_show","(string $username, string $repository, null|string $path = null, null|string $reference = null)","Get contents of any file or directory in a repository",2],["Contents::create","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_create","(string $username, string $repository, string $path, string $content, string $message, null|string $branch = null, array $committer = null)","Creates a new file in a repository",2],["Contents::exists","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_exists","(string $username, string $repository, string $path, null|string $reference = null)","Checks that a given path exists in a repository.",2],["Contents::update","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_update","(string $username, string $repository, string $path, string $content, string $message, string $sha, null|string $branch = null, array $committer = null)","Updates the contents of a file in a repository",2],["Contents::rm","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_rm","(string $username, string $repository, string $path, string $message, string $sha, null|string $branch = null, array $committer = null)","Deletes a file from a repository",2],["Contents::archive","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_archive","(string $username, string $repository, string $format, null|string $reference = null)","Get content of archives in a repository",2],["Contents::download","Github\\Api\\Repository\\Contents","Github\/Api\/Repository\/Contents.html#method_download","(string $username, string $repository, string $path, null|string $reference = null)","Get the contents of a file in a repository",2],["DeployKeys::all","Github\\Api\\Repository\\DeployKeys","Github\/Api\/Repository\/DeployKeys.html#method_all","($username, $repository)","",2],["DeployKeys::show","Github\\Api\\Repository\\DeployKeys","Github\/Api\/Repository\/DeployKeys.html#method_show","($username, $repository, $id)","",2],["DeployKeys::create","Github\\Api\\Repository\\DeployKeys","Github\/Api\/Repository\/DeployKeys.html#method_create","($username, $repository, array $params)","",2],["DeployKeys::update","Github\\Api\\Repository\\DeployKeys","Github\/Api\/Repository\/DeployKeys.html#method_update","($username, $repository, $id, array $params)","",2],["DeployKeys::remove","Github\\Api\\Repository\\DeployKeys","Github\/Api\/Repository\/DeployKeys.html#method_remove","($username, $repository, $id)","",2],["Downloads::all","Github\\Api\\Repository\\Downloads","Github\/Api\/Repository\/Downloads.html#method_all","(string $username, string $repository)","List downloads in selected repository",2],["Downloads::show","Github\\Api\\Repository\\Downloads","Github\/Api\/Repository\/Downloads.html#method_show","(string $username, string $repository, integer $id)","Get a download in selected repository",2],["Downloads::remove","Github\\Api\\Repository\\Downloads","Github\/Api\/Repository\/Downloads.html#method_remove","(string $username, string $repository, integer $id)","Delete a download in selected repository",2],["Forks::all","Github\\Api\\Repository\\Forks","Github\/Api\/Repository\/Forks.html#method_all","($username, $repository, array $params = array())","",2],["Forks::create","Github\\Api\\Repository\\Forks","Github\/Api\/Repository\/Forks.html#method_create","($username, $repository, array $params = array())","",2],["Hooks::all","Github\\Api\\Repository\\Hooks","Github\/Api\/Repository\/Hooks.html#method_all","($username, $repository)","",2],["Hooks::show","Github\\Api\\Repository\\Hooks","Github\/Api\/Repository\/Hooks.html#method_show","($username, $repository, $id)","",2],["Hooks::create","Github\\Api\\Repository\\Hooks","Github\/Api\/Repository\/Hooks.html#method_create","($username, $repository, array $params)","",2],["Hooks::update","Github\\Api\\Repository\\Hooks","Github\/Api\/Repository\/Hooks.html#method_update","($username, $repository, $id, array $params)","",2],["Hooks::test","Github\\Api\\Repository\\Hooks","Github\/Api\/Repository\/Hooks.html#method_test","($username, $repository, $id)","",2],["Hooks::remove","Github\\Api\\Repository\\Hooks","Github\/Api\/Repository\/Hooks.html#method_remove","($username, $repository, $id)","",2],["Labels::all","Github\\Api\\Repository\\Labels","Github\/Api\/Repository\/Labels.html#method_all","($username, $repository)","",2],["Labels::show","Github\\Api\\Repository\\Labels","Github\/Api\/Repository\/Labels.html#method_show","($username, $repository, $label)","",2],["Labels::create","Github\\Api\\Repository\\Labels","Github\/Api\/Repository\/Labels.html#method_create","($username, $repository, array $params)","",2],["Labels::update","Github\\Api\\Repository\\Labels","Github\/Api\/Repository\/Labels.html#method_update","($username, $repository, $label, array $params)","",2],["Labels::remove","Github\\Api\\Repository\\Labels","Github\/Api\/Repository\/Labels.html#method_remove","($username, $repository, $label)","",2],["Releases::all","Github\\Api\\Repository\\Releases","Github\/Api\/Repository\/Releases.html#method_all","(string $username, string $repository)","List releases in selected repository",2],["Releases::show","Github\\Api\\Repository\\Releases","Github\/Api\/Repository\/Releases.html#method_show","(string $username, string $repository, integer $id)","Get a release in selected repository",2],["Releases::create","Github\\Api\\Repository\\Releases","Github\/Api\/Repository\/Releases.html#method_create","(string $username, string $repository, array $params)","Create new release in selected repository",2],["Releases::edit","Github\\Api\\Repository\\Releases","Github\/Api\/Repository\/Releases.html#method_edit","(string $username, string $repository, integer $id, array $params)","Edit release in selected repository",2],["Releases::remove","Github\\Api\\Repository\\Releases","Github\/Api\/Repository\/Releases.html#method_remove","(string $username, string $repository, integer $id)","Delete a release in selected repository (Not thoroughly",2],["Releases::assets","Github\\Api\\Repository\\Releases","Github\/Api\/Repository\/Releases.html#method_assets","()","",2],["Statuses::show","Github\\Api\\Repository\\Statuses","Github\/Api\/Repository\/Statuses.html#method_show","(string $username, string $repository, string $sha)","",2],["Statuses::combined","Github\\Api\\Repository\\Statuses","Github\/Api\/Repository\/Statuses.html#method_combined","(string $username, string $repository, string $sha)","",2],["Statuses::create","Github\\Api\\Repository\\Statuses","Github\/Api\/Repository\/Statuses.html#method_create","(string $username, string $repository, string $sha, array $params = array())","",2],["User::find","Github\\Api\\User","Github\/Api\/User.html#method_find","(string $keyword)","Search users by username:",2],["User::all","Github\\Api\\User","Github\/Api\/User.html#method_all","(integer|null $id = null)","Request all users:",2],["User::show","Github\\Api\\User","Github\/Api\/User.html#method_show","(string $username)","Get extended information about a user by its username",2],["User::organizations","Github\\Api\\User","Github\/Api\/User.html#method_organizations","(string $username)","Get extended information about a user by its username",2],["User::following","Github\\Api\\User","Github\/Api\/User.html#method_following","(string $username)","Request the users that a specific user is following",2],["User::followers","Github\\Api\\User","Github\/Api\/User.html#method_followers","(string $username)","Request the users following a specific user",2],["User::watched","Github\\Api\\User","Github\/Api\/User.html#method_watched","(string $username)","Request the repository that a specific user is watching",2],["User::starred","Github\\Api\\User","Github\/Api\/User.html#method_starred","(string $username, int $page = 1)","Request starred repositories that a specific user has",2],["User::subscriptions","Github\\Api\\User","Github\/Api\/User.html#method_subscriptions","(string $username)","Request the repository that a specific user is watching",2],["User::repositories","Github\\Api\\User","Github\/Api\/User.html#method_repositories","(string $username, string $type = &#039;owner&#039;, string $sort = &#039;full_name&#039;, string $direction = &#039;asc&#039;)","Get the repositories of a user",2],["User::gists","Github\\Api\\User","Github\/Api\/User.html#method_gists","(string $username)","Get the public gists for a user",2],["User::keys","Github\\Api\\User","Github\/Api\/User.html#method_keys","(string $username)","Get the public keys for a user",2],["User::publicEvents","Github\\Api\\User","Github\/Api\/User.html#method_publicEvents","(string $username)","List events performed by a user",2],["Client::__construct","Github\\Client","Github\/Client.html#method___construct","(<a href=\"Github\/HttpClient\/HttpClientInterface.html\"><abbr title=\"Github\\HttpClient\\HttpClientInterface\">HttpClientInterface<\/abbr><\/a> $httpClient = null)","Instantiate a new GitHub client",2],["Client::api","Github\\Client","Github\/Client.html#method_api","(string $name)","",2],["Client::authenticate","Github\\Client","Github\/Client.html#method_authenticate","(string $tokenOrLogin, null|string $password = null, null|string $authMethod = null)","Authenticate a user for all next requests",2],["Client::setEnterpriseUrl","Github\\Client","Github\/Client.html#method_setEnterpriseUrl","(string $enterpriseUrl)","Sets the URL of your GitHub Enterprise instance.",2],["Client::getHttpClient","Github\\Client","Github\/Client.html#method_getHttpClient","()","",2],["Client::setHttpClient","Github\\Client","Github\/Client.html#method_setHttpClient","(<a href=\"Github\/HttpClient\/HttpClientInterface.html\"><abbr title=\"Github\\HttpClient\\HttpClientInterface\">HttpClientInterface<\/abbr><\/a> $httpClient)","",2],["Client::clearHeaders","Github\\Client","Github\/Client.html#method_clearHeaders","()","Clears used headers",2],["Client::setHeaders","Github\\Client","Github\/Client.html#method_setHeaders","(array $headers)","",2],["Client::getOption","Github\\Client","Github\/Client.html#method_getOption","(string $name)","",2],["Client::setOption","Github\\Client","Github\/Client.html#method_setOption","(string $name, mixed $value)","",2],["Client::getSupportedApiVersions","Github\\Client","Github\/Client.html#method_getSupportedApiVersions","()","Returns an array of valid API versions supported by",2],["Client::__call","Github\\Client","Github\/Client.html#method___call","($name, $args)","",2],["Client::currentUser","Github\\Client","Github\/Client.html#method_currentUser","()","",2],["Client::me","Github\\Client","Github\/Client.html#method_me","()","",2],["Client::ent","Github\\Client","Github\/Client.html#method_ent","()","",2],["Client::enterprise","Github\\Client","Github\/Client.html#method_enterprise","()","",2],["Client::git","Github\\Client","Github\/Client.html#method_git","()","",2],["Client::gitData","Github\\Client","Github\/Client.html#method_gitData","()","",2],["Client::gist","Github\\Client","Github\/Client.html#method_gist","()","",2],["Client::gists","Github\\Client","Github\/Client.html#method_gists","()","",2],["Client::issue","Github\\Client","Github\/Client.html#method_issue","()","",2],["Client::issues","Github\\Client","Github\/Client.html#method_issues","()","",2],["Client::markdown","Github\\Client","Github\/Client.html#method_markdown","()","",2],["Client::organization","Github\\Client","Github\/Client.html#method_organization","()","",2],["Client::organizations","Github\\Client","Github\/Client.html#method_organizations","()","",2],["Client::pr","Github\\Client","Github\/Client.html#method_pr","()","",2],["Client::pullRequest","Github\\Client","Github\/Client.html#method_pullRequest","()","",2],["Client::pullRequests","Github\\Client","Github\/Client.html#method_pullRequests","()","",2],["Client::repo","Github\\Client","Github\/Client.html#method_repo","()","",2],["Client::repos","Github\\Client","Github\/Client.html#method_repos","()","",2],["Client::repository","Github\\Client","Github\/Client.html#method_repository","()","",2],["Client::repositories","Github\\Client","Github\/Client.html#method_repositories","()","",2],["Client::team","Github\\Client","Github\/Client.html#method_team","()","",2],["Client::teams","Github\\Client","Github\/Client.html#method_teams","()","",2],["Client::user","Github\\Client","Github\/Client.html#method_user","()","",2],["Client::users","Github\\Client","Github\/Client.html#method_users","()","",2],["Client::authorization","Github\\Client","Github\/Client.html#method_authorization","()","",2],["Client::authorizations","Github\\Client","Github\/Client.html#method_authorizations","()","",2],["Client::meta","Github\\Client","Github\/Client.html#method_meta","()","",2],["ApiLimitExceedException::__construct","Github\\Exception\\ApiLimitExceedException","Github\/Exception\/ApiLimitExceedException.html#method___construct","($limit = 5000, $code, $previous = null)","",2],["MissingArgumentException::__construct","Github\\Exception\\MissingArgumentException","Github\/Exception\/MissingArgumentException.html#method___construct","($required, $code, $previous = null)","",2],["TwoFactorAuthenticationRequiredException::__construct","Github\\Exception\\TwoFactorAuthenticationRequiredException","Github\/Exception\/TwoFactorAuthenticationRequiredException.html#method___construct","($type, $code, $previous = null)","",2],["TwoFactorAuthenticationRequiredException::getType","Github\\Exception\\TwoFactorAuthenticationRequiredException","Github\/Exception\/TwoFactorAuthenticationRequiredException.html#method_getType","()","",2],["CacheInterface::has","Github\\HttpClient\\Cache\\CacheInterface","Github\/HttpClient\/Cache\/CacheInterface.html#method_has","(string $id)","",2],["CacheInterface::getModifiedSince","Github\\HttpClient\\Cache\\CacheInterface","Github\/HttpClient\/Cache\/CacheInterface.html#method_getModifiedSince","(string $id)","",2],["CacheInterface::getETag","Github\\HttpClient\\Cache\\CacheInterface","Github\/HttpClient\/Cache\/CacheInterface.html#method_getETag","(string $id)","",2],["CacheInterface::get","Github\\HttpClient\\Cache\\CacheInterface","Github\/HttpClient\/Cache\/CacheInterface.html#method_get","(string $id)","",2],["CacheInterface::set","Github\\HttpClient\\Cache\\CacheInterface","Github\/HttpClient\/Cache\/CacheInterface.html#method_set","(string $id, <abbr title=\"Guzzle\\Http\\Message\\Response\">Response<\/abbr> $response)","",2],["FilesystemCache::__construct","Github\\HttpClient\\Cache\\FilesystemCache","Github\/HttpClient\/Cache\/FilesystemCache.html#method___construct","(string $path)","",2],["FilesystemCache::get","Github\\HttpClient\\Cache\\FilesystemCache","Github\/HttpClient\/Cache\/FilesystemCache.html#method_get","(string $id)","",2],["FilesystemCache::set","Github\\HttpClient\\Cache\\FilesystemCache","Github\/HttpClient\/Cache\/FilesystemCache.html#method_set","(string $id, <abbr title=\"Guzzle\\Http\\Message\\Response\">Response<\/abbr> $response)","",2],["FilesystemCache::has","Github\\HttpClient\\Cache\\FilesystemCache","Github\/HttpClient\/Cache\/FilesystemCache.html#method_has","(string $id)","",2],["FilesystemCache::getModifiedSince","Github\\HttpClient\\Cache\\FilesystemCache","Github\/HttpClient\/Cache\/FilesystemCache.html#method_getModifiedSince","(string $id)","",2],["FilesystemCache::getETag","Github\\HttpClient\\Cache\\FilesystemCache","Github\/HttpClient\/Cache\/FilesystemCache.html#method_getETag","(string $id)","",2],["GaufretteCache::__construct","Github\\HttpClient\\Cache\\GaufretteCache","Github\/HttpClient\/Cache\/GaufretteCache.html#method___construct","(<abbr title=\"Gaufrette\\Filesystem\">Filesystem<\/abbr> $filesystem)","",2],["GaufretteCache::get","Github\\HttpClient\\Cache\\GaufretteCache","Github\/HttpClient\/Cache\/GaufretteCache.html#method_get","(string $id)","",2],["GaufretteCache::set","Github\\HttpClient\\Cache\\GaufretteCache","Github\/HttpClient\/Cache\/GaufretteCache.html#method_set","(string $id, <abbr title=\"Guzzle\\Http\\Message\\Response\">Response<\/abbr> $response)","",2],["GaufretteCache::has","Github\\HttpClient\\Cache\\GaufretteCache","Github\/HttpClient\/Cache\/GaufretteCache.html#method_has","(string $id)","",2],["GaufretteCache::getModifiedSince","Github\\HttpClient\\Cache\\GaufretteCache","Github\/HttpClient\/Cache\/GaufretteCache.html#method_getModifiedSince","(string $id)","",2],["GaufretteCache::getETag","Github\\HttpClient\\Cache\\GaufretteCache","Github\/HttpClient\/Cache\/GaufretteCache.html#method_getETag","(string $id)","",2],["CachedHttpClient::getCache","Github\\HttpClient\\CachedHttpClient","Github\/HttpClient\/CachedHttpClient.html#method_getCache","()","",2],["CachedHttpClient::setCache","Github\\HttpClient\\CachedHttpClient","Github\/HttpClient\/CachedHttpClient.html#method_setCache","(<a href=\"Github\/HttpClient\/Cache\/CacheInterface.html\"><abbr title=\"Github\\HttpClient\\Cache\\CacheInterface\">CacheInterface<\/abbr><\/a> $cache)","",2],["CachedHttpClient::request","Github\\HttpClient\\CachedHttpClient","Github\/HttpClient\/CachedHttpClient.html#method_request","(string $path, mixed $body = null, string $httpMethod = &#039;GET&#039;, array $headers = array(), array $options = array())","Send a request to the server, receive a response, decode",2],["CachedHttpClient::getLastResponse","Github\\HttpClient\\CachedHttpClient","Github\/HttpClient\/CachedHttpClient.html#method_getLastResponse","($force = false)","",2],["HttpClient::__construct","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method___construct","(array $options = array(), <abbr title=\"Guzzle\\Http\\ClientInterface\">ClientInterface<\/abbr> $client = null)","",2],["HttpClient::setOption","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_setOption","(string $name, mixed $value)","Change an option value.",2],["HttpClient::setHeaders","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_setHeaders","(array $headers)","Set HTTP headers",2],["HttpClient::clearHeaders","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_clearHeaders","()","Clears used headers",2],["HttpClient::addListener","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_addListener","($eventName, $listener)","",2],["HttpClient::addSubscriber","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_addSubscriber","(<abbr title=\"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface\">EventSubscriberInterface<\/abbr> $subscriber)","",2],["HttpClient::get","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_get","(string $path, array $parameters = array(), array $headers = array())","Send a GET request",2],["HttpClient::post","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_post","(string $path, mixed $body = null, array $headers = array())","Send a POST request",2],["HttpClient::patch","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_patch","(string $path, mixed $body = null, array $headers = array())","Send a PATCH request",2],["HttpClient::delete","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_delete","(string $path, mixed $body = null, array $headers = array())","Send a DELETE request",2],["HttpClient::put","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_put","(string $path, mixed $body, array $headers = array())","Send a PUT request",2],["HttpClient::request","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_request","(string $path, mixed $body = null, string $httpMethod = &#039;GET&#039;, array $headers = array(), array $options = array())","Send a request to the server, receive a response, decode",2],["HttpClient::authenticate","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_authenticate","(string $tokenOrLogin, null|string $password = null, $method)","Authenticate a user for all next requests",2],["HttpClient::getLastRequest","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_getLastRequest","()","",2],["HttpClient::getLastResponse","Github\\HttpClient\\HttpClient","Github\/HttpClient\/HttpClient.html#method_getLastResponse","()","",2],["HttpClientInterface::get","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_get","(string $path, array $parameters = array(), array $headers = array())","Send a GET request",2],["HttpClientInterface::post","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_post","(string $path, mixed $body = null, array $headers = array())","Send a POST request",2],["HttpClientInterface::patch","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_patch","(string $path, mixed $body = null, array $headers = array())","Send a PATCH request",2],["HttpClientInterface::put","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_put","(string $path, mixed $body, array $headers = array())","Send a PUT request",2],["HttpClientInterface::delete","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_delete","(string $path, mixed $body = null, array $headers = array())","Send a DELETE request",2],["HttpClientInterface::request","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_request","(string $path, mixed $body, string $httpMethod = &#039;GET&#039;, array $headers = array())","Send a request to the server, receive a response, decode",2],["HttpClientInterface::setOption","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_setOption","(string $name, mixed $value)","Change an option value.",2],["HttpClientInterface::setHeaders","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_setHeaders","(array $headers)","Set HTTP headers",2],["HttpClientInterface::authenticate","Github\\HttpClient\\HttpClientInterface","Github\/HttpClient\/HttpClientInterface.html#method_authenticate","(string $tokenOrLogin, null|string $password, null|string $authMethod)","Authenticate a user for all next requests",2],["AuthListener::__construct","Github\\HttpClient\\Listener\\AuthListener","Github\/HttpClient\/Listener\/AuthListener.html#method___construct","($tokenOrLogin, $password = null, $method)","",2],["AuthListener::onRequestBeforeSend","Github\\HttpClient\\Listener\\AuthListener","Github\/HttpClient\/Listener\/AuthListener.html#method_onRequestBeforeSend","(<abbr title=\"Guzzle\\Common\\Event\">Event<\/abbr> $event)","",2],["ErrorListener::__construct","Github\\HttpClient\\Listener\\ErrorListener","Github\/HttpClient\/Listener\/ErrorListener.html#method___construct","(array $options)","",2],["ErrorListener::onRequestError","Github\\HttpClient\\Listener\\ErrorListener","Github\/HttpClient\/Listener\/ErrorListener.html#method_onRequestError","(<abbr title=\"Guzzle\\Common\\Event\">Event<\/abbr> $event)","{@inheritDoc}",2],["ResponseMediator::getContent","Github\\HttpClient\\Message\\ResponseMediator","Github\/HttpClient\/Message\/ResponseMediator.html#method_getContent","(<abbr title=\"Guzzle\\Http\\Message\\Response\">Response<\/abbr> $response)","",2],["ResponseMediator::getPagination","Github\\HttpClient\\Message\\ResponseMediator","Github\/HttpClient\/Message\/ResponseMediator.html#method_getPagination","(<abbr title=\"Guzzle\\Http\\Message\\Response\">Response<\/abbr> $response)","",2],["ResponseMediator::getApiLimit","Github\\HttpClient\\Message\\ResponseMediator","Github\/HttpClient\/Message\/ResponseMediator.html#method_getApiLimit","(<abbr title=\"Guzzle\\Http\\Message\\Response\">Response<\/abbr> $response)","",2],["ResultPager::__construct","Github\\ResultPager","Github\/ResultPager.html#method___construct","(<a href=\"Github\/Client.html\"><abbr title=\"Github\\Client\">Client<\/abbr><\/a> $client)","The Github client to use for pagination.",2],["ResultPager::getPagination","Github\\ResultPager","Github\/ResultPager.html#method_getPagination","()","",2],["ResultPager::fetch","Github\\ResultPager","Github\/ResultPager.html#method_fetch","(<a href=\"Github\/Api\/ApiInterface.html\"><abbr title=\"Github\\Api\\ApiInterface\">ApiInterface<\/abbr><\/a> $api, string $method, array $parameters = array())","Fetch a single result (page) from an api call",2],["ResultPager::fetchAll","Github\\ResultPager","Github\/ResultPager.html#method_fetchAll","(<a href=\"Github\/Api\/ApiInterface.html\"><abbr title=\"Github\\Api\\ApiInterface\">ApiInterface<\/abbr><\/a> $api, string $method, array $parameters = array())","Fetch all results (pages) from an api call Use with",2],["ResultPager::postFetch","Github\\ResultPager","Github\/ResultPager.html#method_postFetch","()","Method that performs the actual work to refresh the",2],["ResultPager::hasNext","Github\\ResultPager","Github\/ResultPager.html#method_hasNext","()","Check to determine the availability of a next page",2],["ResultPager::fetchNext","Github\\ResultPager","Github\/ResultPager.html#method_fetchNext","()","Fetch the next page",2],["ResultPager::hasPrevious","Github\\ResultPager","Github\/ResultPager.html#method_hasPrevious","()","Check to determine the availability of a previous page",2],["ResultPager::fetchPrevious","Github\\ResultPager","Github\/ResultPager.html#method_fetchPrevious","()","Fetch the previous page",2],["ResultPager::fetchFirst","Github\\ResultPager","Github\/ResultPager.html#method_fetchFirst","()","Fetch the first page",2],["ResultPager::fetchLast","Github\\ResultPager","Github\/ResultPager.html#method_fetchLast","()","Fetch the last page",2],["ResultPagerInterface::getPagination","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_getPagination","()","",2],["ResultPagerInterface::fetch","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_fetch","(<a href=\"Github\/Api\/ApiInterface.html\"><abbr title=\"Github\\Api\\ApiInterface\">ApiInterface<\/abbr><\/a> $api, string $method, array $parameters = array())","Fetch a single result (page) from an api call",2],["ResultPagerInterface::fetchAll","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_fetchAll","(<a href=\"Github\/Api\/ApiInterface.html\"><abbr title=\"Github\\Api\\ApiInterface\">ApiInterface<\/abbr><\/a> $api, string $method, array $parameters = array())","Fetch all results (pages) from an api call Use with",2],["ResultPagerInterface::postFetch","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_postFetch","()","Method that performs the actual work to refresh the",2],["ResultPagerInterface::hasNext","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_hasNext","()","Check to determine the availability of a next page",2],["ResultPagerInterface::hasPrevious","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_hasPrevious","()","Check to determine the availability of a previous page",2],["ResultPagerInterface::fetchNext","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_fetchNext","()","Fetch the next page",2],["ResultPagerInterface::fetchPrevious","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_fetchPrevious","()","Fetch the previous page",2],["ResultPagerInterface::fetchFirst","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_fetchFirst","()","Fetch the first page",2],["ResultPagerInterface::fetchLast","Github\\ResultPagerInterface","Github\/ResultPagerInterface.html#method_fetchLast","()","Fetch the last page",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']